//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Additions/Inputs/MainControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainControls"",
    ""maps"": [
        {
            ""name"": ""BasicGamePlay"",
            ""id"": ""6e514646-12e3-4e9b-ba76-5a9ad62dc1ea"",
            ""actions"": [
                {
                    ""name"": ""MovingUp"",
                    ""type"": ""Button"",
                    ""id"": ""8ab313ca-47ab-42fb-a8b1-438a3df41a7a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovingDown"",
                    ""type"": ""Button"",
                    ""id"": ""94203212-3f2a-49f5-af62-036a457b6d0e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovingLeft"",
                    ""type"": ""Button"",
                    ""id"": ""fa2aea26-a408-4251-b766-8a102739b80b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovingRight"",
                    ""type"": ""Button"",
                    ""id"": ""0ca28d50-fd20-42e3-a798-a0b61f53d3cc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""d81bd184-e812-42ba-905d-5b93bae53353"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""155040c3-e459-4837-b012-a341d46f497e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dce24886-6e34-4f50-9a1b-0d28a1a6fbcf"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79632364-226b-46cf-8e0f-8c1d2f73283e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7fd4b103-1f4c-49e3-ab44-5a4c50f02813"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8aff4385-6234-4bbf-9f49-6bc715ea6330"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef0f0ecb-68ce-4683-9aac-8f238642b515"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77dc19fc-b8cd-486d-bb70-6066c126cb9e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8780d6a2-044d-4783-a39d-14f85f53b91a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc32b2d2-1a26-4265-a994-3586df368090"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BasicGamePlay
        m_BasicGamePlay = asset.FindActionMap("BasicGamePlay", throwIfNotFound: true);
        m_BasicGamePlay_MovingUp = m_BasicGamePlay.FindAction("MovingUp", throwIfNotFound: true);
        m_BasicGamePlay_MovingDown = m_BasicGamePlay.FindAction("MovingDown", throwIfNotFound: true);
        m_BasicGamePlay_MovingLeft = m_BasicGamePlay.FindAction("MovingLeft", throwIfNotFound: true);
        m_BasicGamePlay_MovingRight = m_BasicGamePlay.FindAction("MovingRight", throwIfNotFound: true);
        m_BasicGamePlay_Exit = m_BasicGamePlay.FindAction("Exit", throwIfNotFound: true);
    }

    ~@MainControls()
    {
        UnityEngine.Debug.Assert(!m_BasicGamePlay.enabled, "This will cause a leak and performance issues, MainControls.BasicGamePlay.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BasicGamePlay
    private readonly InputActionMap m_BasicGamePlay;
    private List<IBasicGamePlayActions> m_BasicGamePlayActionsCallbackInterfaces = new List<IBasicGamePlayActions>();
    private readonly InputAction m_BasicGamePlay_MovingUp;
    private readonly InputAction m_BasicGamePlay_MovingDown;
    private readonly InputAction m_BasicGamePlay_MovingLeft;
    private readonly InputAction m_BasicGamePlay_MovingRight;
    private readonly InputAction m_BasicGamePlay_Exit;
    public struct BasicGamePlayActions
    {
        private @MainControls m_Wrapper;
        public BasicGamePlayActions(@MainControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovingUp => m_Wrapper.m_BasicGamePlay_MovingUp;
        public InputAction @MovingDown => m_Wrapper.m_BasicGamePlay_MovingDown;
        public InputAction @MovingLeft => m_Wrapper.m_BasicGamePlay_MovingLeft;
        public InputAction @MovingRight => m_Wrapper.m_BasicGamePlay_MovingRight;
        public InputAction @Exit => m_Wrapper.m_BasicGamePlay_Exit;
        public InputActionMap Get() { return m_Wrapper.m_BasicGamePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicGamePlayActions set) { return set.Get(); }
        public void AddCallbacks(IBasicGamePlayActions instance)
        {
            if (instance == null || m_Wrapper.m_BasicGamePlayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BasicGamePlayActionsCallbackInterfaces.Add(instance);
            @MovingUp.started += instance.OnMovingUp;
            @MovingUp.performed += instance.OnMovingUp;
            @MovingUp.canceled += instance.OnMovingUp;
            @MovingDown.started += instance.OnMovingDown;
            @MovingDown.performed += instance.OnMovingDown;
            @MovingDown.canceled += instance.OnMovingDown;
            @MovingLeft.started += instance.OnMovingLeft;
            @MovingLeft.performed += instance.OnMovingLeft;
            @MovingLeft.canceled += instance.OnMovingLeft;
            @MovingRight.started += instance.OnMovingRight;
            @MovingRight.performed += instance.OnMovingRight;
            @MovingRight.canceled += instance.OnMovingRight;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        private void UnregisterCallbacks(IBasicGamePlayActions instance)
        {
            @MovingUp.started -= instance.OnMovingUp;
            @MovingUp.performed -= instance.OnMovingUp;
            @MovingUp.canceled -= instance.OnMovingUp;
            @MovingDown.started -= instance.OnMovingDown;
            @MovingDown.performed -= instance.OnMovingDown;
            @MovingDown.canceled -= instance.OnMovingDown;
            @MovingLeft.started -= instance.OnMovingLeft;
            @MovingLeft.performed -= instance.OnMovingLeft;
            @MovingLeft.canceled -= instance.OnMovingLeft;
            @MovingRight.started -= instance.OnMovingRight;
            @MovingRight.performed -= instance.OnMovingRight;
            @MovingRight.canceled -= instance.OnMovingRight;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        public void RemoveCallbacks(IBasicGamePlayActions instance)
        {
            if (m_Wrapper.m_BasicGamePlayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBasicGamePlayActions instance)
        {
            foreach (var item in m_Wrapper.m_BasicGamePlayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BasicGamePlayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BasicGamePlayActions @BasicGamePlay => new BasicGamePlayActions(this);
    public interface IBasicGamePlayActions
    {
        void OnMovingUp(InputAction.CallbackContext context);
        void OnMovingDown(InputAction.CallbackContext context);
        void OnMovingLeft(InputAction.CallbackContext context);
        void OnMovingRight(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
}
